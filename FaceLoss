classdef Faces
    properties %(input)
       Temp_face {mustBeNumeric} % Temperature at the face [K]
       Temp_surr {mustBeNumeric} % Temperature of the surrounding [K]
       Length {mustBeNumeric} % Length of the plate's side [m]
       Width {mustBeNumeric} % Width of the plate's side [m]
       Material % Material ['ss' 'in' 'hexane' 'n-dodecane' 'air']
       Orientation % Orientation of the Plate ['v' for Vertical else horizontal]
    end
    properties %(constants)
       Gravity = 9.81; % Earths Gravity [m/s^2]
       Sigma = 5.67e-8; % Stefan Boltzmann Constant[W/m^2*K^4]
    end
    properties %(dependent)
       Area % Area of the face
       Rayleigh % Rayleigh Number
       Beta % Coefficient of thermal expansion [K^-1]
       Nusselt % Nusselt Number
       ConvectionCoef % Convective coefficient [W/m^2*K]
       Qrad % Radiative Losses [W]
       Qconv % Convective Losses [W]
       FaceLoss % Total Losses associated to the face
    end
    methods
        function fac = Faces(m,Tsurr,Tface,l,w,o)
           if nargin > 0
           fac.Temp_surr = Tsurr;
           fac.Temp_face = Tface;
           m = lower(m);
           fac.Material = Materials(m,fac.Temp_face,fac.Temp_surr);
           fac.Length = l;
           fac.Width = w;
           if strcmpi(o,'v')
               fac.Orientation = 'Vertical';
           else
               fac.Orientation = 'Horizontal';
           end
           end
        end
        function aval = get.Area(fac)
            aval = fac.Length * fac.Width;
        end
        function bval = get.Beta(fac)
            bval = 1/fac.Material.Tfilm;
        end
        function rval = get.Rayleigh(fac)
            air = Materials('air',fac.Temp_face,fac.Temp_surr);
            if strcmp(fac.Orientation,'Vertical')
            rval = fac.Gravity*fac.Beta*(fac.Temp_face-fac.Temp_surr)*fac.Length^3*air.Prandtl/air.viscosity^2;
            else
            Lc = fac.Area/(2*(fac.Length+fac.Width));
            rval = fac.Gravity*fac.Beta*(fac.Temp_face-fac.Temp_surr)*Lc^3*air.Prandtl/air.viscosity^2;
            end
        end
        function nval = get.Nusselt(fac)
            air = Materials('air',fac.Temp_face,fac.Temp_surr);
            if strcmp(fac.Orientation,'Vertical')
                if fac.Rayleigh < 10^9
                    nval = .68+.67*fac.Rayleigh^.25/(1+(.492/air.Prandtl)^(9/16))^(4/9);
                else
                    nval = (.825+.387*fac.Rayleigh^(1/6)/(1+(.492/air.Prandtl)^(9/16))^(8/27))^2;
                end
            else
                if fac.Rayleigh > 10^4 && fac.Rayleigh < 10^9 && air.Prandtl >= .7
                    nval = .59*fac.Rayleigh^(.25);
                elseif fac.Rayleigh > 10^9 && fac.Rayleigh < 10^13
                    nval = .1*fac.Rayleigh^(.33);
                else
                    nval = 0; % Negligible losses
                end
            end
        end
        function htc = get.ConvectionCoef(fac)
            air = Materials('air',fac.Temp_face,fac.Temp_surr);
             htc = air.k_conductivity * fac.Nusselt/fac.Length;
        end
        function qrval = get.Qrad(fac)
            qrval = fac.Sigma*fac.Material.emissivity*fac.Area*(fac.Temp_face^4 - fac.Temp_surr^4);
        end
        function qcval = get.Qconv(fac)
            qcval = fac.ConvectionCoef*fac.Area*(fac.Temp_face-fac.Temp_surr);
        end
        function fl = get.FaceLoss(fac)
            fl = fac.Qrad + fac.Qconv;
        end
        function fac = updateTface(fac,T)
            fac.Temp_face = T;
            fac.Material = fac.Material.updateTface(fac.Temp_face); % How do we update material since this is different from the other get functions
            fac.Beta = fac.get.Beta();
            fac.Rayleigh = fac.get.Rayleigh();
            fac.Nusselt = fac.get.Nusselt();
            fac.ConvectionCoef = fac.get.ConvectionCoef();
            fac.Qrad = fac.get.Qrad();
            fac.Qconv = fac.get.Qconv();
            fac.FaceLoss = fac.get.FaceLoss();
        end
    end
end

classdef Impingememt
    properties %(input)
       Temp_face {mustBeNumeric} % Temperature at the face [K]
       Temp_fluid {mustBeNumeric} % Temperature of the surrounding [K]
       Length {mustBeNumeric} % Length of the plate's side [m]
       Width {mustBeNumeric} % Width of the plate's side [m]
       Material % Material ['ss' 'in' 'hexane' 'n-dodecane' 'air']
       Fluid % Fuel that leaked ['hexane' 'n-dodecane']
       Orientation % Orientation of the Plate ['v' for Vertical else horizontal]
       Mass_rate % Mass flow rate of leakage
    end
    properties %(dependent)
       RCLoss % Losses due to radiation and natural convection
       VapLoss % Losses due to the vaporization of the leaked fuel
       TotalLoss % Sum of all losses associated to the face
    end
    methods
        function imp = Impingement(m,f,Tfluid,Tface,l,w,o,mfr)
           imp.Temp_fluid = Tfluid;
           imp.Temp_face = Tface;
           m = lower(m);
           imp.Material = Materials(m,imp.Temp_face,imp.Temp_fluid);
           imp.Fluid = f;
           imp.Length = l;
           imp.Width = w;
           imp.Orientation = o;
           imp.Mass_rate = mfr;
           imp.RCLoss = Faces(m,imp.Temp_surr,imp.Temp_face,imp.Length,imp.Width,imp.Orientation);
        end
        function vap = get.VapLoss(imp)
            if strcmpi(imp.Fluid,'Hexane')
                hex = Materials(imp.Fluid,imp.Temp_fluid,imp.Temp_face);
                vap = imp.Mass_rate*(hex.Latent+hex.capacity*(hex.CriticalTemp-imp.Temp_fluid));
            elseif strcmpi(imp.Fluid,'n-dodecane')
                nd = Materials(imp.Fluid,imp.Temp_fluid,imp.Temp_face);
                vap = imp.Mass_rate*(nd.Latent+nd.capacity*(nd.CriticalTemp-imp.Temp_fluid));
            else
                error('Fuel leaked is not defined')
            end
        end
        function tloss = get.TotalLoss(imp)
            tloss = imp.RCLoss.FaceLoss + imp.VapLoss;
        end
    end
end



% Create an update function for the losses of vaporizing the fuel.

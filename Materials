classdef Materials
    properties %(input)
        Tface {mustBeNumeric} % Temperature of material[K]
        Material % Material ['ss' 'in' 'hexane' 'n-dodecane' 'air']
        Tsurr {mustBeNumeric} % Temperature of surrounding[K]
    end
    properties %(constants)
        rho % Desity of the material[kg/m^3]
        Latent % Latent heat of the fuel[J/mol]
        CriticalTemp % Critical temperature of a fuel                      REMEMBER TO UPDATE THIS TO BE INCLUDED INTO THE CONSTANTS
    end
    properties %(dependent)
        Tfilm % Film Temperature
        capacity % Heat Capacity of material[J/gK]
        emissivity % Emissivity of Material
        viscosity % Kinematic Viscosity[m^2/s]
        k_conductivity % Thermal Conductivity of Fluid[W/mK]
        Prandtl % Prandtl Number of Fluid
        airDtabase % Table of air properties
    end
    methods
        function mat = Materials(m,Tface,Tsurr)
            if nargin > 0
            mat.Tface = Tface;
            mat.Tsurr = Tsurr;
            m = lower(m);
            if strcmp(m,'ss')
                mat.Material = 'Stainless Steel 304';
                mat.rho = 8000;
            elseif strcmp(m,'in')
                mat.Material = 'Inconel 601';
                mat.rho = 8192;
            elseif strcmp(m,'hexane')
                mat.Material = 'Hexane';
                mat.Latent = 31000;
            elseif strcmp(m,'n-dodecane')
                mat.Material = 'n-Dodecane';
                mat.Latent = 61000;
            elseif strcmp(m,'air')
                mat.Material = 'Air';
                mat.airDtabase = load('airDtabase.mat');
            else
                error('Material not recognized');
            end
            end
        end
        function ftemp = get.Tfilm(mat)
            ftemp = (mat.Tface+mat.Tsurr)/2;
        end
        function eval = get.emissivity(mat)
            if strcmp(mat.Material,'Stainless Steel 304')
                eval = .61;
            elseif strcmp(mat.Material,'Inconel 601')
                eval = .7;
            else
                error('Material is not defined for get.emissivity');
            end
        end
        function val = get.capacity(mat)
            if strcmp(mat.Material,'Stainless Steel 304')
                val = .433+2e-4*mat.Tface-8e-10*mat.Tface^2;
            elseif strcmp(mat.Material,'Inconel 601')
                val = .65;
            elseif strcmp(mat.Material,'Hexane')
                val = 2.26;
            elseif strcmp(mat.Material,'n-Dodecane')
                val = 2.44;
            else
                error('Material not defined for get.capacity');
            end
        end
% These components require looking up the kinematic viscosity, thermal
% conductivity, and the prandtl number up in the table. With respect to the
% film temperature derived from the average between the Ambient temperature
% and the Wall Temperature. NEED TO MAKE THIS ONLY FOR AIR
        function vval = get.viscosity(mat)
            if strcmp(mat.Material,'Air')
            vval = interp1(mat.airDtabase.Temp,mat.airDtabase.kviscosity,mat.Tfilm);
            end
        end
        function kval = get.k_conductivity(mat)
            if strcmp(mat.Material,'Air')
            kval = interp1(mat.airDtabase.Temp,mat.airDtabase.kconductivity,mat.Tfilm);
            end
        end
        function pval = get.Prandtl(mat)
            if strcmp(mat.Material,'Air')
            pval = interp1(mat.airDtabase.Temp,mat.airDtabase.prandtl,mat.Tfilm);
            end
        end
        function mat = updateTface(mat,T)
            mat.Tface = T;
            mat.Tfilm = mat.get.Tfilm();
            mat.emissivity = mat.get.emissivity();
            mat.capacity = mat.get.capacity();
            mat.viscosity = mat.get.viscosity();
            mat.k_conductivity = mat.get.k_conductivity();
            mat.Prandtl = mat.get.Prandtl();
        end
    end
end




% add temperature critical to the fuels and modify the units such that its
% not in terms of mol. hand calculations would suffice. 
